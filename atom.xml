<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Jibson's Blog]]></title>
  <link href="http://mjibson.github.com/atom.xml" rel="self"/>
  <link href="http://mjibson.github.com/"/>
  <updated>2013-03-04T20:09:45-05:00</updated>
  <id>http://mjibson.github.com/</id>
  <author>
    <name><![CDATA[Matt Jibson]]></name>
    <email><![CDATA[matt.jibson@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Careers Localization, part 1: Why Roll Our Own?]]></title>
    <link href="http://mjibson.github.com/blog/2013/02/27/careers-localization-part-1-why-roll-our-own/"/>
    <updated>2013-02-27T15:52:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2013/02/27/careers-localization-part-1-why-roll-our-own</id>
    <content type="html"><![CDATA[<p>Localization is a difficult feature to add to a website. A few months ago, we at <a href="http://careers.stackoverflow.com/">Stack Overflow Careers</a> localized into <a href="http://careers.stackoverflow.com/de/">German</a>. This took months of effort from much of the team. I would like to describe our design and implementation over a few blog posts.</p>

<p>This post will discuss our design choices.</p>

<h2>Requirements</h2>

<p>Localization consists of</p>

<ol>
<li>indicating text that should be localized</li>
<li>translating it</li>
<li>showing the correct translation to the user</li>
</ol>


<p>There are various existing solutions in most programming languages that can do this. We looked at some, but none were able to meet all of our design and support requirements:</p>

<ol>
<li>C#</li>
<li>JavaScript</li>
<li>Razor views</li>
<li>data attributes for localized error messages on form validation</li>
<li>markdown formatting (so that no HTML is ever sent to translators)</li>
<li>dynamic text replacement</li>
<li>pluralization-aware</li>
<li>gettext-style (English text in a function - no resource files and identifiers)</li>
</ol>


<p>We discussed some of these requirements with others who had previously localized their sites. Some had decided to forfeit features due to difficulty of implementation (pluralization, dynamic text). Supporting each of these requirements is difficult, so we understood the decision to omit them. However, we were not willing to do the same.</p>

<h2>Our Solution</h2>

<p>The other solutions missed some our of requirements, or functioned in a way we didn&#8217;t like. We were, however, heavily influenced by existing work, like that of <a href="https://github.com/danielcrenna/i18n">Daniel Crenna</a>. We have a long history of rolling our own software when the 90% solution isn&#8217;t enough, and that tradition was continued here. We ended up writing the entire implementation from scratch. This includes designing an API, extraction process (to determine what strings the translators should translate), and localization engine to support numbers, dates, and translated strings. This allowed us to have a unified pipeline for text extraction and processing (i.e., the C# and JavaScript implementations could be identical at each step of the process), and give us the power and speed we wanted in the implementation.</p>

<p>As will be described in future posts, our implementation met all of our requirements, but with some limitations. Localization is hard, and doing everything is near impossible. If we wanted something better than the 90% solution, then what we have now is maybe in the 95% range: there are still missing features that we haven&#8217;t figured out yet.</p>

<p><a href="http://mjibson.github.com/blog/2013/02/28/careers-localization-part-2-api/">Part 2: The API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appstats for Go]]></title>
    <link href="http://mjibson.github.com/blog/2013/02/05/appstats-for-go/"/>
    <updated>2013-02-05T01:56:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2013/02/05/appstats-for-go</id>
    <content type="html"><![CDATA[<p>I would like to announce the release of appstats for go. Installation instructions are <a href="http://godoc.org/github.com/mjibson/appstats">available on godoc.org</a>. I&#8217;d like to thank Dave Symonds for <a href="https://groups.google.com/forum/?fromgroups=#!topic/google-appengine-go/laOsfI1dSGY">his help</a> on this project.</p>

<p>A <a href="http://schalmei-go.appspot.com/">demo site</a> is available.</p>

<p><a href="http://mjibson.github.com/assets/images/appstats-timeline.png"><img src="http://mjibson.github.com/assets/images/appstats-timeline.png"></a></p>

<p><a href="https://developers.google.com/appengine/docs/python/tools/appstats">Appstats</a> is an incredibly useful library for the python (and java) runtimes. The go runtime has had no similar library, adding to the difficulty of developing significant apps. I&#8217;d like to describe a bit about how appstats is implemented (applies to python, as well) and where I think the go runtime is today.</p>

<h2>implementation</h2>

<p>Appstats for go was implemented by copying the python HTML templates, examining the source, and attempting to make something work in go.</p>

<h3>intercepting the data</h3>

<p>In order for appstats to work pleasantly, it needs to automatically populate data from the HTTP request and intercept all RPC calls to app engine&#8217;s services (datastore, memcache, etc.). This is done by a wrapper that provides an <code>appengine.Context</code> instance to a handler function. Both the <code>http.ResponseWriter</code> and <code>appengine.Context</code> variables are actually appstats structs that forward importart calls and record timings and data. Go routines are fully supported: all of the internals are thread-safe, and appstats waits for all RPC calls to complete before serializing and saving its data.</p>

<h3>persist to memcache</h3>

<p>I had always wondered how python appstats stored its data. It was obviously in memcache, but it was interesting how it was able to so quickly store so many requests and fetch them all. How did that work? The timestamp on a request (well, just <code>time.Now()</code> when appstats starts) is used. The current count of microseconds is the memcache key to a request. If it overwrites another request, that&#8217;s ok. For example, a request that happened at <code>04:10:40.40567</code> gets the key <code>40500</code>. The final two digits are converted to 0 so that we can limit the number of keys to 1000. Then, to fetch them all, appstats generates all 1000 possible keys and requests them from memcache. Only existing keys are returned. Each request stores a partial (for the index dashboard) and full (for the details page) item in memcache, with the type (&#8220;part&#8221; or &#8220;full&#8221;) appended to the key name.</p>

<h3>things it doesn&#8217;t have</h3>

<p>There are a few things that python appstats does that this implementation does not (yet). Some may not be possible ever, and some may require Google to help us out a bit:</p>

<ul>
<li>full RPC cost information (only writes cost, currently; reads and small ops not yet implemented)</li>
<li>stack traces with variables and values at each stack frame</li>
<li>protobuf examination for better details (in the &#8220;Response&#8221; and &#8220;Request&#8221; lines of each RPC call on the details page)</li>
</ul>


<h2>today&#8217;s app engine go runtime</h2>

<p>The two killer features of the python runtime on app engine are NDB and appstats. I have been refusing to make a serious app with the go runtime because of this lack. To address those concerns, I have created <a href="https://github.com/mjibson/goon">goon</a> (an NDB-like library for go) and appstats. With the addition of these two libraries, I believe <strong>the go runtime can now compete with python</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Job offers are not demands]]></title>
    <link href="http://mjibson.github.com/blog/2013/01/10/job-offers-are-not-demands/"/>
    <updated>2013-01-10T22:13:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2013/01/10/job-offers-are-not-demands</id>
    <content type="html"><![CDATA[<p>I am contacted around once per week by people interested in hiring me. Usually email, sometimes on <a href="http://careers.stackoverflow.com">Careers</a>, even phone calls. I don&#8217;t think I&#8217;ve ever responded to these. This is not because I&#8217;m against this kind of recruiting, it&#8217;s because I haven&#8217;t been persuaded in the least by these offers. My <a href="http://careers.stackoverflow.com/mjibson">careers profile</a> even lists me as &#8220;Passive candidate interested in full-time position.&#8221;. That means I have a job, but if you have a better one, maybe I&#8217;ll take it. No one has even piqued my interest, so far. The job offers here (well, not offers, but I&#8217;m not sure of a better term) tell me all about the company and the job, but nothing about how my life will be better there.</p>

<p>Let&#8217;s make one up and look it it:</p>

<h2>Software Developer at Fun Startup!</h2>

<p>We&#8217;re a great funded startup with a small and growing team looking to hire the best. We have fun, work on hard problems, and love exciting technologies. You&#8217;ll own large portions of the code and have the freedom to work how you want.</p>

<h4>Skills</h4>

<p>Experience in MVC-based technologies and databases
&#8230;And many other things</p>

<h4>About Us</h4>

<p>We are fun people and awesome. We offer good salaries and benefits.</p>

<h2>Attraction</h2>

<p>The above is about 90% of all the job offers I see, and I will never respond to them. Nowhere in it do they <strong>entice me to work for them</strong>. So many places already offer the same things: startup, small, growing, fun technologies, good salary. I want to see something better than those. What&#8217;s worse, the only list there is a <strong>list of demands</strong> about what I must have. Where is the list of things you&#8217;ll give me? There&#8217;s multiple descriptions of skills I must have, and none about why I should provide those skills to you. I don&#8217;t like job offers that sound like they&#8217;re scrutinizing me. I want something that dazzles me.</p>

<p>For example, a few months ago I was contacted by a company on Careers. I responded not interested. I received a message back asking why. I said: &#8220;I love my current job. Your message didn&#8217;t convince me that I&#8217;d be happier at your company than I am at mine&#8221;. The response was so interesting: <strong> &#8220;can you truly get the sense of what a company is all about from an e-mail message?&#8221;</strong> Fixing that idea is the purpose of this blog post. Here was my final message:</p>

<hr />

<p>I think that is possible to a large degree. For example, my company is also hiring. <a href="http://careers.stackoverflow.com/jobs/28723/web-developer-stack-exchange-stack-exchange">Here&#8217;s</a> our job post.</p>

<p>The benefits list is of such high quality that unless I see such a list on another job post, I&#8217;m not interested. I assume that if they had benefits this good, they would list them, since so few places do. The paragraph before the benefits list discusses the quality of the leadership and that they care deeply about making an awesome place to work. I read those two paragraphs alone and I don&#8217;t care about the rest of the job post, because I get a sense that they&#8217;ll treat me like a king, which they do.</p>

<p>The work descriptions of your message were great. I&#8217;m sure the work would be fun and satisfying, and that I would like working with the team. But without advertising the actual working conditions and how I&#8217;ll be treated beyond salary, it&#8217;s hard to switch.</p>

<h2>Conclusion</h2>

<p>If companies want to attract the best developers, they must publicly advertise <em>why</em> their job is better. Without that, no amount of &#8220;we&#8217;re awesome&#8221; talk is going to get anywhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go-dsp FFT performance with go routines]]></title>
    <link href="http://mjibson.github.com/blog/2013/01/04/go-dsp-fft-performance-with-go-routines/"/>
    <updated>2013-01-04T03:30:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2013/01/04/go-dsp-fft-performance-with-go-routines</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mjibson/go-dsp">go-dsp</a> has been around for almost a year now. Recently I have been working on performance improvements. The low-hanging fruit was easy (removing duplicate calculations, smarter array copying, efficient data reordering with bit reversal). The difficult part was getting go routines to work as intended. That is, to have them improve the performance of go-dsp. This turned out to be more difficult than I expected.</p>

<h2>Why the fast Fourier Transform is parallelizable</h2>

<p><a href="http://en.wikipedia.org/wiki/File:DIT-FFT-butterfly.png"><img class="right" src="http://mjibson.github.com/assets/images/DIT-FFT-butterfly.png" width="300"></a></p>

<p>The FFT is paralellizable because of how the &#8220;fast&#8221; part is implemented. Given an input of length <code>L</code>, if there exist integers <code>M</code> and <code>N</code> such that <code>L = M * N</code>, then the original problem (one transform of size <code>L</code>) can be restated as <code>M</code> problems of size <code>N</code>. These <code>M</code> problems can be run in parallel. For example, say I have an input of size 8. I can reform this as 2 inputs of size 4. These 2 inputs can be run in parallel.</p>

<h2>Attempts</h2>

<p>Go&#8217;s easy support of go routines was the obvious solution here. I went through <a href="https://github.com/mjibson/go-dsp/tree/mp-test">a few solutions</a> until I found one that was <strong>not</strong> slower. What I discovered was that, although the FFT is highly parallelizable, setting up parallelization can easily take more time than it saves. The actual unit of work that is done is just multiplying two pairs of numbers and saving the result.</p>

<p>My first idea was to use wait groups. This involves a synchronized counter. One go routine is spun up per block (there are <code>M</code> blocks, as described above) and the counter incremented. The go routine decrements the counter when it is done. We wait until the counter is back to zero. Since the number of blocks varies from <code>2</code> to <code>L / 2</code>, this means that for about half of the time, so many go routines are spun up to do a very tiny amount of work that overall runtime increases. Ok, so, only do the wait group solution if it&#8217;ll actually be faster. I ran some tests and found out that (on my machine), if the block size is over 128, it&#8217;s worthwhile to spin up a new go routine. Remember that this solution was always using a single go routine when we were on smaller block sizes, ignoring any potential multicore speedup.</p>

<p>The second idea was to use worker pools. Since the main problem is the creation (not use) of go routines, spin up as many as we will need up front and then send work off to them. From testing I found that putting the number of workers at the value of <a href="http://golang.org/pkg/runtime/#GOMAXPROCS"><code>GOMAXPROCS</code></a> worked out well. Each worker&#8217;s job is to multiply the number pair described above. So, for each of the <code>n log n</code> iterations, we are sending off <code>L / 2</code> jobs. This ended up performing almost exactly as good as the above solution for larger block sizes, but had the added benefit of working with smaller block sizes, too. I guessed the reason for the lack of more speedup was the communication overhead. The jobs were sent using channels, which aren&#8217;t free.</p>

<p>The final solution addressed that problem by changing the number of jobs from <code>L / 2</code> to the block size (which, as a reminder, goes from <code>2</code> to <code>L / 2</code>). So only during one iteration are we sending the same number of jobs over. Almost always are we sending less. Previously, the jobs were specified by an index. This new solution instead specified a min and max index. The subsequent indicies are calculated in the worker itself. This results in much less channel overhead and distributes some work (index calculation) out to workers.</p>

<h2>Results</h2>

<p>The original, single-thread solution contains no multicore logic. It benchmarked at around 505ms. The graphs below show performance at <code>GOMAXPROCS = 6</code> and a FFT size of <code>2 ^ 20 = 1048576</code>.</p>

<p><img src="http://mjibson.github.com/assets/images/fftmp-1.png"></p>

<p>Above are results for the first two attempts. The blue line is the original, single-thread control. The green line shows the very poor performance at small block sizes. The red line shows similar performance as green for large block sizes but that it was able to handle smaller block sizes better (but still not great). Minimum runtime was 1.7x faster (267ms minimum).</p>

<p><img src="http://mjibson.github.com/assets/images/fftmp-2.png"></p>

<p>Here we see the final solution with indexed worker groups. Minimum runtime was 252ms (2.0x speedup). Not the 6x increase I wanted, but it&#8217;s not bad.</p>

<p>The final code (using the indexed worker group solution) is now <a href="https://github.com/mjibson/go-dsp">available</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Piano Pieces]]></title>
    <link href="http://mjibson.github.com/blog/2012/12/20/great-piano-pieces/"/>
    <updated>2012-12-20T20:51:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2012/12/20/great-piano-pieces</id>
    <content type="html"><![CDATA[<p>I have compiled some of my <a href="http://open.spotify.com/user/128346620/playlist/65QbOiGs3DuWa5I6a9MjXI">favorite piano recordings</a> on spotify. (Sorry rdio folks, I tried to make an equivalent playlist, but rdio doesn&#8217;t have some of the recordings I wanted and I couldn&#8217;t find suitable replacements.) Below are some short program notes.</p>

<h3>Ravel Piano Concerto 2</h3>

<p>One of the best overall. If I had to choose, the second movement is my favorite piano piece. I play it often, when I can. It is soft and meandering. The middle section&#8217;s intensity is a thrilling lift. Goose bumps come regurlarly while listening.</p>

<h3>Stravinsky Three Movements of Petrushka</h3>

<p>Originally a ballet for orchestra, he <a href="http://en.wikipedia.org/wiki/Trois_mouvements_de_Petrouchka">arranged it for piano</a> by request. I first heard this in 2004 at CSU for the opening of their new music hall. The excellent <a href="http://www.yakovkasman.com/">Yakov Kasman</a> performed and taught a master class. It was the first time I saw someone stand up during a piano solo due to his own intensity and interest in the piece. One of the most exciting and helpful performances I ever saw. I found a copy of the sheet music and was unable to play certain parts. (Being an orchestra original, it is for many instruments. The piano reduction is reduced to sometimes three staves. Having only two hands presents a problem. Somehow Mr. Kasman gets around that limitation.)</p>

<h3>John Adams Phrygian Gates</h3>

<p>A half-hour piece in a minimalist style. It starts simply enough with short phrases repeated many times over. The complexity and beauty increase throughout. Some people do not like minimalism. I feel about it the same as I feel about all music genres: the genre is unimportant, the quality of the sound is what makes it good. Phrygian Gates has many new ideas and sounds, many pleasing. This is why I enjoy it. But for those unfamiliar with minimalism: it has no melody and little harmony. The joy felt here is from understanding what is happening and the genuine feeling of pleasure when hearing something new and original (to me, this is the mark of a great composer).</p>

<h3>Prokofiev Piano Concerti 1, 2, 3</h3>

<p>The Russians are my favorite composers (and often performers; see above). Continuing on my last point about enjoying new sounds, Prokofiev was one of the most inventive composers. Although only a handful of years behind Rachmaninoff, Prokofiev was a century ahead in terms of originality. His concerti are my favorite compositions of his. Unlike Chopin (who was a poor arranger for orchestra, and thus produced piano concerti that are little more than excellent piano over orchestral chord changes), Prokofiev excelled at all voices of the orchestra. His concerti are thus more like duets between piano and orchestra, where each has an important part in the music. I have heard these concerti so many times they no longer sound dissonant. Instead I love hearing the chords because they are so new. My ears don&#8217;t hear things like this. The second concerto, although the least popular of the three, has some of the best rhythms and chords I&#8217;ve heard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Success by selective education]]></title>
    <link href="http://mjibson.github.com/blog/2012/12/16/success-by-selective-education/"/>
    <updated>2012-12-16T14:20:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2012/12/16/success-by-selective-education</id>
    <content type="html"><![CDATA[<h2>Or: how to win by not studying</h2>

<p><a href="http://en.wikipedia.org/wiki/File:MOSFET_Structure.png"><img class="right" src="http://mjibson.github.com/assets/images/mosfet.png" width="300"></a></p>

<p>I once took a junior-level course in college about Metal-Oxide-Semiconductor Field-Effect Transistors. As part of the electrical engineering cirriculum, it was an important course. I had no interest whatsoever in the course, and to this day I&#8217;m still not sure what it was about. For example, I once showed up to class (I suspect my attendance was around or below 50%) to turn in a homework assignment and discovered that a midterm was scheduled for that day. I used the homework as the single sheet of notes we were allowed. I similarly neglected many of the courses I took.</p>

<p>I would like to describe here why I did that, my expectations about the future (due to that behavior), and what the future actually brought.</p>

<h2>Succumbing to laziness</h2>

<p>Some facts: In eight years of college, I ended up with two undergraduate degrees (music and computer engineering) and one Master&#8217;s degree (electrical engineering). In the six years of undergrad, I took some 220 credits (averaging 18 per semester). My GPA was around a 3.2 the entire time. During this time, I also wrote a lot of code. I worked on <a href="https://github.com/mjibson/ci">a game</a>, <a href="https://github.com/mjibson/iads-pygtk">a startup</a>, and <a href="https://github.com/mjibson/slammer">consulted</a>, some <a href="http://www.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/print/lilypond/Makefile?rev=1.1;content-type=text%2Fplain">OpenBSD ports</a>.</p>

<p>I found that my grades were not related to the number of credits I was taking. Study time was not the limiting factor, interest was. What I wanted to do was program, and studying was a distraction. <strong>Programming is what I wanted to do, so I did it.</strong> Uninteresting classes just got in the way of writing software. I rarely studied for those classes (I don&#8217;t recall ever once reading any textbook unless it was to solve a specific homework problem), and passed with usually a C. Interesting classes were fun, so I worked on them (the fun kind of work) and generally got As or Bs. This was my standard: <strong>I&#8217;ll only work if I like it.</strong></p>

<h2>Impressions</h2>

<p><a href="http://en.wikipedia.org/wiki/File:Op-amp_symbol.svg"><img class="right" src="http://mjibson.github.com/assets/images/opamp.png" width="300"></a></p>

<p>At the time I felt that I was making mistakes and slacking off. I thought: instead of programming I should be studying for those other classes. I felt like I was messing myself up as an engineer since I was completely ignoring half of my major courses. For example, after 6 years of electrical engineering courses, I still didn&#8217;t know what an <a href="http://en.wikipedia.org/wiki/Operational_amplifier">op-amp</a> was, even though I had studied them in at least 4 courses. I was convinced that I was making bad choices. I was paying to go to school and not study. I was spending my time doing something that I didn&#8217;t plan on pursuing as a career (I wanted to design processors for Intel or AMD, not program full-time).</p>

<p>But even given this internal doubt, I still couldn&#8217;t bring myself to change. I just didn&#8217;t care about some of my courses, and I enjoyed making software so much that I wasn&#8217;t going to stop working on it to study.</p>

<h2>Results</h2>

<p>While finishing up my Master&#8217;s thesis, I had a great time writing the software to collect and process my lab data, and was totally bored by the actual thesis. It was sometime around there that I realized: I&#8217;m a software engineer, not an electrical engineer. All of my degrees pointed to EE, but my background, skills, and experience were strongly in the software camp.</p>

<p>Today I have a job at <a href="http://mattjibson.com/blog/2012/04/28/how-i-got-a-job-at-stack-overflow/">Stack Overflow</a>. Working here has been a dream for around 10 years. I consider myself supremely lucky to have met this major, personal goal. Now, I believe that I could not have gotten this job unless I pursued programming skills to the <strong>detriment of college achievement</strong>. If I had spent my time studying and working on those classes that I didn&#8217;t enjoy, I would not have had the time to work on software. I do not think I would have my current job if I had studied more instead of programming. I&#8217;m convinced that I&#8217;m happier and in a better job because of poor college performance than if I had excelled at college. I suspect in that case I would have a less interesting job doing something I&#8217;m less excited about.</p>

<h2>For others</h2>

<p>This is what worked for me. I wrote this blog post not to encourage students to slack off their course work, but to offer a real story. I was disappointed in myself for many years until my current job. I think there are some current students who have a similar outlook on their college career, and I wanted to offer this as a potential future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NYC Now]]></title>
    <link href="http://mjibson.github.com/blog/2012/06/17/nyc-now/"/>
    <updated>2012-06-17T15:47:00-04:00</updated>
    <id>http://mjibson.github.com/blog/2012/06/17/nyc-now</id>
    <content type="html"><![CDATA[<p>This weekend I went to <a href="http://hacknjill.com/">hackn&#8217;jill</a>. I made <a href="http://nyc-now.appspot.com/">NYC Now</a>, a web app to find something to do right now. It shows a map with events around it. It can detect your location or you can set one by clicking. Ajax updates via json. Events and map markers highlight or animate on hover of the corresponding item. It is quickly filterable (easy to remove things you don&#8217;t want to see), so something can be found fast. Code <a href="https://github.com/mjibson/nycnow">is available on github</a>. BSD license.</p>

<p>Although the idea was one of the simpler at the hackathon (aggregation of some events APIs + a map), I think the implementation and interface are quick and pleasant enough to make it a pleasure to use. It is fast and unobtrusive. I found myself browsing around it tonight, and found quite a few things I will actually go do at some point (which I would have not found before).</p>

<p>Things I learned:</p>

<ul>
<li>async app engine url fetch</li>
<li>html5 url rewriting</li>
<li>html5 location fetching</li>
<li>more jquery</li>
<li>I still think app engine is the best web platform around</li>
</ul>


<p>It is powered by:</p>

<ul>
<li>google app engine</li>
<li>python</li>
<li>jquery</li>
<li>foursquare</li>
<li>yipit</li>
<li><a href="https://nycopendata.socrata.com/">nyc.gov open data</a></li>
<li><a href="http://developer.nytimes.com/docs/events_api">New York Times Events API</a></li>
</ul>


<p>It has no:</p>

<ul>
<li>social media connections</li>
<li>users or registration</li>
<li>database</li>
<li>cache</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[re2net - part 2: DFA]]></title>
    <link href="http://mjibson.github.com/blog/2012/05/29/re2net-part-2-dfa/"/>
    <updated>2012-05-29T15:54:00-04:00</updated>
    <id>http://mjibson.github.com/blog/2012/05/29/re2net-part-2-dfa</id>
    <content type="html"><![CDATA[<p>I have <a href="https://github.com/mjibson/re2net/commit/4f5f274fb6299c703d70541af795918371f0bdd6">added</a> a DFA state machine to the re2net library, as described <a href="http://swtch.com/~rsc/regexp/regexp1.html">here</a>. This method computes the DFA states on demand, which makes subsequent matches with the same instance faster. The crude benchmark below shows run times for the NFA (as in <a href="http://blog.mattjibson.com/2012/05/re2net---C-RE2-implementation-part-1">part 1</a>), DFA&#8217;s first run, DFA&#8217;s second run, and C#&#8217;s Regex library as a comparison.</p>

<p>The results below show that the DFA is about an order of magnitude slower than the NFA on the first run (as expected, since the cache is being computed), but an order of magnitude faster on the second run (since the cache is being used).</p>

<p>Until now, this has been an academic exercise to learn C# and build a simple regex parser. With that done, the next step is to support the full regex syntax. The <a href="http://code.google.com/p/re2/">RE2</a> library is this project, but I&#8217;m going to use <a href="http://code.google.com/p/go/source/browse/#hg%2Fsrc%2Fpkg%2Fregexp">Go&#8217;s regexp package</a> since I think the code will be easier to read, and it&#8217;s the same implementation. This is all assuming I maintain interest.</p>

<p>Column headers, all times in seconds.</p>

<p>n, NFA, DFA, DFA2, C# Regex:</p>

<pre>
01: 0.0046062, 0.0025143, 0.0000043, 00.0000278
02: 0.0000148, 0.0000108, 0.0000024, 00.0000040
03: 0.0000222, 0.0000231, 0.0000034, 00.0000034
04: 0.0000145, 0.0000216, 0.0000077, 00.0000021
05: 0.0000170, 0.0000355, 0.0000049, 00.0000030
06: 0.0000213, 0.0000476, 0.0000102, 00.0000052
07: 0.0000334, 0.0000742, 0.0000064, 00.0000092
08: 0.0000395, 0.0000971, 0.0000077, 00.0000176
09: 0.0000504, 0.0001212, 0.0000080, 00.0000346
10: 0.0000621, 0.0001552, 0.0000086, 00.0000702
11: 0.0000766, 0.0001821, 0.0000086, 00.0001184
12: 0.0000899, 0.0008207, 0.0000092, 00.0002622
13: 0.0001011, 0.0002600, 0.0000092, 00.0004787
14: 0.0001178, 0.0003105, 0.0000111, 00.0010533
15: 0.0001252, 0.0003729, 0.0000120, 00.0020185
16: 0.0001759, 0.0004468, 0.0000160, 00.0041630
17: 0.0001945, 0.0004914, 0.0000120, 00.0088549
18: 0.0002310, 0.0005789, 0.0000157, 00.0160122
19: 0.0002409, 0.0007215, 0.0000139, 00.0318414
20: 0.0003145, 0.0008251, 0.0000170, 00.0634503
21: 0.0003732, 0.0009216, 0.0000148, 00.1416363
22: 0.0004308, 0.0009741, 0.0000185, 00.2809800
23: 0.0004156, 0.0010700, 0.0000160, 00.5715502
24: 0.0004849, 0.0011817, 0.0000204, 01.1391405
25: 0.0005489, 0.0017962, 0.0000216, 02.2826699
26: 0.0005520, 0.0014535, 0.0000228, 04.5484486
27: 0.0010332, 0.0016941, 0.0000213, 09.0551722
28: 0.0010230, 0.0018286, 0.0000216, 18.4857312
29: 0.0010944, 0.0019780, 0.0000207, 37.1557184
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[re2net - part 1: C# RE2 implementation]]></title>
    <link href="http://mjibson.github.com/blog/2012/05/02/re2net-part-1-c-number-re2-implementation/"/>
    <updated>2012-05-02T15:57:00-04:00</updated>
    <id>http://mjibson.github.com/blog/2012/05/02/re2net-part-1-c-number-re2-implementation</id>
    <content type="html"><![CDATA[<p>After reading Russ Cox&#8217;s <a href="http://swtch.com/~rsc/regexp/regexp1.html">regular expression articles</a>, I became interested in porting his <a href="http://code.google.com/p/re2/">RE2</a> library to C#. These posts will describe my effort to port the entire library, which I will do in steps. I know that one could just link to the RE2 library, but I am porting this as an academic exercise to learn C# and regular expression parsing.</p>

<p>The full RE2 implementation is somewhat large. So, for now, I have started with something simpler: porting <a href="http://swtch.com/~rsc/regexp/nfa.c.txt">nfa.c</a>, which is now <a href="https://github.com/mjibson/re2net/commit/4deade8190159843ee512e8b99da5fbaa68fa1e4">committed</a>.</p>

<h3>Performance</h3>

<p>There is a simple script that generates the a?<sup>(n)a<sup>(n)</sup></sup> regexes and compares the performance between this simple nfa implementation and C#&#8217;s Regex class. The results (posted below) conform exactly to those posted in the article.</p>

<p>n, nfa match time (s), C# Regex match time (s):</p>

<pre>
01: 00.0040588, 00.0000321
02: 00.0000299, 00.0000027
03: 00.0000188, 00.0000018
04: 00.0000142, 00.0000021
05: 00.0000191, 00.0000030
06: 00.0000244, 00.0000052
07: 00.0000343, 00.0000092
08: 00.0000405, 00.0000231
09: 00.0000569, 00.0000343
10: 00.0000671, 00.0000683
11: 00.0000794, 00.0001336
12: 00.0001039, 00.0002665
13: 00.0001218, 00.0005337
14: 00.0001447, 00.0010694
15: 00.0001673, 00.0021296
16: 00.0005155, 00.0047231
17: 00.0002180, 00.0085827
18: 00.0002226, 00.0167507
19: 00.0002501, 00.0322935
20: 00.0004020, 00.0742515
21: 00.0005820, 00.1423361
22: 00.0004060, 00.2887820
23: 00.0004518, 00.5772489
24: 00.0005170, 01.1505112
25: 00.0005616, 02.3019515
26: 00.0006077, 04.6177123
27: 00.0009324, 09.1860805
28: 00.0007561, 18.5854136
29: 00.0010960, 37.6036043
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I got a job at Stack Overflow]]></title>
    <link href="http://mjibson.github.com/blog/2012/04/28/how-i-got-a-job-at-stack-overflow/"/>
    <updated>2012-04-28T15:58:00-04:00</updated>
    <id>http://mjibson.github.com/blog/2012/04/28/how-i-got-a-job-at-stack-overflow</id>
    <content type="html"><![CDATA[<p>I just got a job at <a href="http://stackexchange.com/">Stack Exchange</a>. The experience was interesting enough and I learned a few things that could be valuable to others.</p>

<p>We are still hiring <a href="http://careers.stackoverflow.com/jobs/16279/software-developer-new-york-stack-exchange?a=jetqDpm">another developer</a> if you are interested after reading.</p>

<h3>Motivation</h3>

<p>My previous job was good. Some interesting work, some boring work, and a potentially awesome project coming down the pipeline. I was making internal web apps for the firmware department of a hard drive company, and had opportunities to do anything I wanted (stay, work on firmware or other cool stuff). However, the town I was living in (Longmont, CO) was downright boring for a single person, and I wanted to leave as soon as possible just to get out.</p>

<h3>The Bug</h3>

<p>I visited a friend who lives in New York City over Thanksgiving. I visited <a href="http://www.topoftherocknyc.com/">Top of the Rock</a>, which is an observation deck on top of one of the taller buildings right in the middle of the city. You can see almost all of Manhattan up there, and it&#8217;s mesmerizing. While I was there I decided that New York was the place for me. The next few weeks I became more and more convinced that that was where I wanted to live. I decided to start applying for jobs at the start of the new year. And I had to get out of my city.</p>

<h3>(This is not a plug)</h3>

<p>Being a programmer, I use Stack Overflow. I had thus seen the displays for the <a href="http://careers.stackoverflow.com/">careers</a> site. Hey, why not use that to find a job? Ok. I made a profile, which I got to do because of my github activity, and started applying for jobs. (Yes, I ended up finding a job on the same site I am currently employed to work on. I thought it was the best way to find an awesome job, and it was. So, this isn&#8217;t a plug, it&#8217;s just the truth.)</p>

<p>I applied for around 7 jobs near the first of the year. Two said to take an online test, two never replied or disappeared, and one scheduled a phone interview. The phone interview went horribly. The guy asked me one of the questions verbatim from <a href="http://www.joelonsoftware.com/articles/ThePhoneScreen.html">Joel&#8217;s article</a> and I had no idea what to say. No callback. I started studying <a href="http://www.cs.bell-labs.com/cm/cs/pearls/">Programming Pearls</a>.</p>

<h3>Progress</h3>

<p>I did one of the online code tests and got a phone interview a while later from that company. After a second phone interview (both were writing code on a shared document) they flew me out for a few days. Thursday was interviews (coding on a laptop, really hard and fun problems) all day. They asked me to return Friday to work on their product like a normal developer. I thought this was brilliant. A way to see how a candidate actually does the job. I liked them a lot because of how rigorous the interviews were. I wanted to work at a place that was highly demanding of everyone who worked there. They said they&#8217;d get in touch in a day or two. Two weeks later (about a month total) they declined to make an offer, and I was still stuck in a city I hated.</p>

<p>I had suspected I wasn&#8217;t going to get an offer, so I applied (early February) to four more companies. Lots of phone interviews later and I have two onsite interviews scheduled for the same weekend. Of note is that neither of these two companies had had me write any code. I know that not everyone likes code writing interviews, but I do. They&#8217;re difficult. I want to work with people who can do that kind of difficult thing. The first company is a very small startup. They had me do some thinking out loud, database, and design questions. Cool product; I liked them, and they seemed to like me. Second company is more established. They just finished their new office. They had me do an hour-long written test which covered a wide range of stuff. I met with people from various organizations. They were nice, and I was okay, but not thrilled, with their product. Each said they&#8217;d get back to me very soon. Two weeks later, both declined. At this point I was ready to just up and move to New York I wanted to leave so badly.</p>

<h3>First round of lessons</h3>

<p>The count at this point was around 10 applications, phone screens with 7 companies, on site interviews with 3, and 0 offers. What was I doing wrong? I honestly wasn&#8217;t sure. Why did they all take two weeks to figure out they didn&#8217;t want me? Is it that hard?</p>

<p>My guess is that there was a <strong>culture mismatch</strong>. I think I did well in the interviews and was technically qualified for all three jobs. But something about our interaction didn&#8217;t convince them that I was &#8220;the guy&#8221;. I think they had a two week process of saying back and forth to themselves: &#8220;He&#8217;s qualified: hire him.&#8221; &#8220;But he won&#8217;t love working here: no hire.&#8221; &#8220;So? He&#8217;ll still do good work.&#8221; &#8220;But not awesome work.&#8221; After two weeks, they either got bored or found someone else who was a better fit. My internal dialogue, however, was going like this: &#8220;I thought I knew how to program good.&#8221; &#8220;No, clearly you don&#8217;t.&#8221; &#8220;But look at all the typing I did on github!&#8221; &#8220;Even cats can type.&#8221; &#8220;:(&#8220;.</p>

<h3>Proof of concept</h3>

<p>At this point I was crazy to move to New York. But during the double interview weekend, Stack Exchange asked for a phone interview. I was shocked. I have read all of Joel&#8217;s articles, and I know how hard it seems to get a job there. I figured getting a job at Stack Exchange is at least as difficult at getting a job at Google (to which I did not apply, because I thought I wasn&#8217;t smart enough).</p>

<p>Phone interview went, well, pretty much like their article describes. Fizzbuzz-like question. Easy pass. Harder, fun, thoughtful question with coding. Pass. Same thing with another guy. Pass. Fly out for interviews and meet Joel. Cool. Things were happening.</p>

<p>On site interviews also went exactly like their articles describe. No written schedule, just one interview after the next, all coding and experience questions. Lunch downstairs with the Fog Creek guys. Gape and drool at their office space a little, but pretend like I&#8217;m used to it. Joel was sick that day, so I spoke with Michael Pryor. I&#8217;m not sure whether I should be happy with myself or not, but he asked a question that he has been asking for years, and I came up with a solution that he has never seen. I had to stop at points to carefully explain something I thought was obvious that was apparently not. Again, I&#8217;m not sure to interpret this as a good or a bad thing. (Maybe all the smart guys come up with the same smart solution. Maybe I&#8217;m so untrained that I just made something up that really isn&#8217;t that great.)</p>

<p>Apparently it was good enough. I walked out of their offices feeling good, used the restroom, and went to the elevator to catch the car back to the airport. During the one minute that I was waiting for the elevator, the VP of Engineering came out and told me that they were going to make me an offer, which I accepted a week later. I was living in New York less than two weeks after that. (I resigned and decided to move before I had a job offer. I really wanted to leave.)</p>

<h3>More lessons</h3>

<p>Let&#8217;s compare: the first three declined offers took <strong>two weeks</strong> to respond to me. Stack Exchange took <strong>two minutes</strong>. Culture mismatch? Not in the slightest. Love the company and the product? Definitely. I get to work on something that helps developers find better jobs. Something I desperately needed and got.</p>

<p>I am thrilled that those first three companies didn&#8217;t hire me. I am happier here than I would have been there. Technical ability is important, but not everything.</p>

<h3>Most important lesson</h3>

<p>But the most important lesson I got from all of this? <strong>Anyone can work for a dream company.</strong> I say this because I do not feel that I&#8217;m some rockstar programmer. I&#8217;ve just worked and learned like everyone else. I studied writings from some smart programmers, learned a few languages and systems, and in the end got a job at a place that I had been dreaming of working at for over 10 years, when I first heard of them (that is, any company run by Joel and Michael).</p>

<p>Want a job at a dream company? Work and study, and it&#8217;s possible. Not getting offers? Maybe it&#8217;s not evidence that you aren&#8217;t that great, it&#8217;s just that you would fit better somewhere else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Fourier Transform in Go]]></title>
    <link href="http://mjibson.github.com/blog/2011/12/09/fast-fourier-transform-in-go/"/>
    <updated>2011-12-09T15:59:00-05:00</updated>
    <id>http://mjibson.github.com/blog/2011/12/09/fast-fourier-transform-in-go</id>
    <content type="html"><![CDATA[<p>I just completed all the basic functionality for a fully-working <a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform">FFT</a> implementation. It supports inputs as arrays of real or complex values, with the inverse transform, too. It is part of my <a href="https://github.com/mjibson/go-dsp">go-dsp project on github</a>.</p>

<p>Install with:</p>

<p><code>$ goinstall "github.com/mjibson/go-dsp/fft"</code></p>

<p>Some example use code:</p>

<pre><code>package main

import "github.com/mjibson/go-dsp/fft"
import "fmt"

func main() {
        fmt.Println(fft.FFT_real([]float64 {1, 2, 3}))
}
</code></pre>

<h3>Brief introduction to the fast Fourier transform</h3>

<p>Input arrays of length a power of 2 use the radix-2 FFT algorithm (the butterfly one). Inputs of other sizes (non power of 2 and prime lengths) use the Bluestein algorithm. The Bluestein algorithm is interesting because (in contradistinction to the other FFT algorithms for non power of 2 lengths) it works on prime and non-prime lengths. Other solutions require one each for prime and non-prime lengths, so you end up with 3 total algorithms. The purpose of this project was just to get something working, and worry about performance and optimization later.</p>

<p>So, back to Bluestein&#8217;s algorithm. It works by starting with the definition of the discrete Fourier transform (the fast Fourier transform (FFT) is a way to compute the discrete Fourier transform (DFT)), and then doing some algebra on it. This results in an equation that does an operation known as convolution. Convolution is really hard. So, someone created a way to change convolution into multiplication (really easy). That way is&#8230;the Fourier transform! If you take the Fourier transform of two arrays, then multiply the result, and then take the inverse Fourier transform, you have just done convolution. So, you can do the convolution you got from messing with the DFT equation by adding some zeros to the end of the array so it&#8217;s of length a power of 2, and then use the radix-2 FFT algorithm to do the FFTs, multiply, then inverse FFT back, and you have the DFT of an array of any length.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[journalr]]></title>
    <link href="http://mjibson.github.com/blog/2011/09/22/journalr/"/>
    <updated>2011-09-22T16:00:00-04:00</updated>
    <id>http://mjibson.github.com/blog/2011/09/22/journalr</id>
    <content type="html"><![CDATA[<p>I just launched <a href="http://journalr.org">journalr</a>, an online journal site. There are almost no online journal sites, and journalr strives to remedy this and encourage more journal writing. It&#8217;s in the early stages, but it&#8217;s good enough to use. I have already begun transcribing my journals from my mission when I spent 2 years in Brazil, and have enjoyed using journalr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webapp2 sessions with the blobstore]]></title>
    <link href="http://mjibson.github.com/blog/2011/09/11/webapp2-sessions-with-the-blobstore/"/>
    <updated>2011-09-11T16:01:00-04:00</updated>
    <id>http://mjibson.github.com/blog/2011/09/11/webapp2-sessions-with-the-blobstore</id>
    <content type="html"><![CDATA[<p>I recently started using <a href="http://webapp-improved.appspot.com/api/webapp2_extras/sessions.html">webapp2 sessions</a>, and was happy with how they work. However, when trying to access sessions during an upload to the blobstore, I was not able to since the BlobstoreUploadHandler did not inherit from the new BaseHandler I created as directed by the webapp2 session instructions. I wanted to do this to send a message to the user that their upload was successful, using the <code>add_flash()</code> function. Appending <code>?message=Upload successful.</code> to the redirect URL would have worked, but is lame.</p>

<p>Trying to use it through multiple inheritance also fails:
<code>class EntryUploadHandler(blobstore_handlers.BlobstoreUploadHandler, BaseUploadHandler):</code>
with some error.</p>

<p>The solution was to create a BaseUploadHandler class with special handling for sessions. It appears that the upload handler doesn&#8217;t act the same as a normal RequestHandler, so you have to do everything in one place:
`class BaseUploadHandler(blobstore_handlers.BlobstoreUploadHandler):</p>

<pre><code>def add_message(self, level, message):
    store = sessions.get_store(request=self.request)
    session = store.get_session()
    session.add_flash(message, level, BaseHandler.MESSAGE_KEY)
    store.save_sessions(self.response)`
</code></pre>

<p>Full code <a href="https://github.com/mjibson/journalr/blob/master/main.py">here</a>.</p>
]]></content>
  </entry>
  
</feed>
