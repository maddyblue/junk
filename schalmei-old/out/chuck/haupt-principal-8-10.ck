10 => int peaks;
5 => int recs;
3 => int degs;

[ [ -0.0000000000618585303902927, 0.0000001497167009979323567, -0.0000242276282399671460022, 0.0885285658343497317002146], [0.0000000000952168896389686, -0.0000003130436310089229548, 0.0002635019839824527792399, 0.0123829495936314554899171], [0.0000000000061527154647893, 0.0000000029655509487361932, -0.0000329214560398218236649, 0.0255782130105506634587531], [0.0000000000127911838176438, -0.0000000358082127198352009, 0.0000233994809912493126477, 0.0011101054901693605155011], [0.0000000000032158035680083, -0.0000000093692027080304674, 0.0000074049073890939474382, -0.0006262983973389909869364], [0.0000000000006880997384930, -0.0000000013083509460529584, 0.0000009401366333146212977, -0.0000046394026868675029824], [0.0000000000007914537687163, -0.0000000018240801683813785, 0.0000012654373251485180872, -0.0000560034644515266621760], [0.0000000000005345870635988, -0.0000000009954577237194552, 0.0000005635747812847781831, 0.0000330491424280805683286], [0.0000000000002069862895821, -0.0000000003724281637734499, 0.0000002580257780965719460, 0.0000408049832123353033858], [0.0000000000001514459261185, -0.0000000002304690294572707, 0.0000001361136082800929684, 0.0000560815334193100862529 ] ] @=> float percs[][];

[ [    1.00000,    0.49939,    0.50000,    1.00000,    0.50008], [   1.50122,    1.00000,    1.00000,    0.49985,    1.00000], [   0.50122,    1.49939,    1.49939,    1.99969,    1.49992], [   2.00000,    2.00000,    1.99939,    0.99326,    2.00000], [   3.00244,    1.04162,    2.99939,    0.99204,    3.50008], [   2.50122,    0.54957,    4.49878,    1.49985,    2.50008], [   0.59169,    0.43819,    3.99878,    0.98959,    0.50100], [   0.84597,    0.07956,    0.98409,    1.01011,    3.00000], [   1.09535,    2.49939,    0.98103,    0.49311,    0.49855], [   1.59658,    0.41738,    1.01958,    1.01164,    4.00000 ] ] @=> float harms[][];

[ 137.610626, 274.884796, 549.769592, 1098.529816, 2197.396088 ] @=> float bases[];

fun float[] proc_harm(float freq)
{
	float ret[peaks];
	int i;
	0 => int idx;

	for(0 => i; i < recs; i++)
	{
		if(bases[i] < freq)
			i => idx;
	}

	for(0 => i; i < peaks; i++)
	{
		harms[i][idx] => ret[i];
	}

	return ret;
}

fun float[] proc_perc(float freq)
{
	float ret[peaks];
	int i;
	int j;

	for(0 => i; i < peaks; i++)
	{
		0 => ret[i];

		for(0 => j; j <= degs; j++)
		{
			percs[i][j] * Math.pow(freq, degs - j) +=> ret[i];
		}
	}

	return ret;
}

me.arg(0) => string freqstr;
if(freqstr.length() == 0) "440" => freqstr;
Std.atoi(freqstr) => float freq;

proc_harm(freq) @=> float harm[];
proc_perc(freq) @=> float perc[];

Pan2 p => dac;
SinOsc s[peaks];
for(0 => int i; i < peaks; i++)
{
	s[i] => p;
	harm[i] * freq => s[i].freq;
	perc[i] => s[i].gain;
	//<<< harm[i] * freq, "Hz,", perc[i], "gain" >>>;
}

while(true) 1::second => now;
