<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: re2net | Matt Jibson's Blog]]></title>
  <link href="http://mjibson.github.com/blog/categories/re2net/atom.xml" rel="self"/>
  <link href="http://mjibson.github.com/"/>
  <updated>2013-03-13T14:15:42-06:00</updated>
  <id>http://mjibson.github.com/</id>
  <author>
    <name><![CDATA[Matt Jibson]]></name>
    <email><![CDATA[matt.jibson@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[re2net - part 2: DFA]]></title>
    <link href="http://mjibson.github.com/blog/2012/05/29/re2net-part-2-dfa/"/>
    <updated>2012-05-29T15:54:00-06:00</updated>
    <id>http://mjibson.github.com/blog/2012/05/29/re2net-part-2-dfa</id>
    <content type="html"><![CDATA[<p>I have <a href="https://github.com/mjibson/re2net/commit/4f5f274fb6299c703d70541af795918371f0bdd6">added</a> a DFA state machine to the re2net library, as described <a href="http://swtch.com/~rsc/regexp/regexp1.html">here</a>. This method computes the DFA states on demand, which makes subsequent matches with the same instance faster. The crude benchmark below shows run times for the NFA (as in <a href="http://blog.mattjibson.com/2012/05/re2net---C-RE2-implementation-part-1">part 1</a>), DFA's first run, DFA's second run, and C#'s Regex library as a comparison.</p>

<p>The results below show that the DFA is about an order of magnitude slower than the NFA on the first run (as expected, since the cache is being computed), but an order of magnitude faster on the second run (since the cache is being used).</p>

<p>Until now, this has been an academic exercise to learn C# and build a simple regex parser. With that done, the next step is to support the full regex syntax. The <a href="http://code.google.com/p/re2/">RE2</a> library is this project, but I'm going to use <a href="http://code.google.com/p/go/source/browse/#hg%2Fsrc%2Fpkg%2Fregexp">Go's regexp package</a> since I think the code will be easier to read, and it's the same implementation. This is all assuming I maintain interest.</p>

<p>Column headers, all times in seconds.</p>

<p>n, NFA, DFA, DFA2, C# Regex:</p>

<pre>
01: 0.0046062, 0.0025143, 0.0000043, 00.0000278
02: 0.0000148, 0.0000108, 0.0000024, 00.0000040
03: 0.0000222, 0.0000231, 0.0000034, 00.0000034
04: 0.0000145, 0.0000216, 0.0000077, 00.0000021
05: 0.0000170, 0.0000355, 0.0000049, 00.0000030
06: 0.0000213, 0.0000476, 0.0000102, 00.0000052
07: 0.0000334, 0.0000742, 0.0000064, 00.0000092
08: 0.0000395, 0.0000971, 0.0000077, 00.0000176
09: 0.0000504, 0.0001212, 0.0000080, 00.0000346
10: 0.0000621, 0.0001552, 0.0000086, 00.0000702
11: 0.0000766, 0.0001821, 0.0000086, 00.0001184
12: 0.0000899, 0.0008207, 0.0000092, 00.0002622
13: 0.0001011, 0.0002600, 0.0000092, 00.0004787
14: 0.0001178, 0.0003105, 0.0000111, 00.0010533
15: 0.0001252, 0.0003729, 0.0000120, 00.0020185
16: 0.0001759, 0.0004468, 0.0000160, 00.0041630
17: 0.0001945, 0.0004914, 0.0000120, 00.0088549
18: 0.0002310, 0.0005789, 0.0000157, 00.0160122
19: 0.0002409, 0.0007215, 0.0000139, 00.0318414
20: 0.0003145, 0.0008251, 0.0000170, 00.0634503
21: 0.0003732, 0.0009216, 0.0000148, 00.1416363
22: 0.0004308, 0.0009741, 0.0000185, 00.2809800
23: 0.0004156, 0.0010700, 0.0000160, 00.5715502
24: 0.0004849, 0.0011817, 0.0000204, 01.1391405
25: 0.0005489, 0.0017962, 0.0000216, 02.2826699
26: 0.0005520, 0.0014535, 0.0000228, 04.5484486
27: 0.0010332, 0.0016941, 0.0000213, 09.0551722
28: 0.0010230, 0.0018286, 0.0000216, 18.4857312
29: 0.0010944, 0.0019780, 0.0000207, 37.1557184
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[re2net - part 1: C# RE2 implementation]]></title>
    <link href="http://mjibson.github.com/blog/2012/05/02/re2net-part-1-c-number-re2-implementation/"/>
    <updated>2012-05-02T15:57:00-06:00</updated>
    <id>http://mjibson.github.com/blog/2012/05/02/re2net-part-1-c-number-re2-implementation</id>
    <content type="html"><![CDATA[<p>After reading Russ Cox's <a href="http://swtch.com/~rsc/regexp/regexp1.html">regular expression articles</a>, I became interested in porting his <a href="http://code.google.com/p/re2/">RE2</a> library to C#. These posts will describe my effort to port the entire library, which I will do in steps. I know that one could just link to the RE2 library, but I am porting this as an academic exercise to learn C# and regular expression parsing.</p>

<p>The full RE2 implementation is somewhat large. So, for now, I have started with something simpler: porting <a href="http://swtch.com/~rsc/regexp/nfa.c.txt">nfa.c</a>, which is now <a href="https://github.com/mjibson/re2net/commit/4deade8190159843ee512e8b99da5fbaa68fa1e4">committed</a>.</p>

<h3>Performance</h3>

<p>There is a simple script that generates the a?<sup>(n)a<sup>(n)</sup></sup> regexes and compares the performance between this simple nfa implementation and C#'s Regex class. The results (posted below) conform exactly to those posted in the article.</p>

<p>n, nfa match time (s), C# Regex match time (s):</p>

<pre>
01: 00.0040588, 00.0000321
02: 00.0000299, 00.0000027
03: 00.0000188, 00.0000018
04: 00.0000142, 00.0000021
05: 00.0000191, 00.0000030
06: 00.0000244, 00.0000052
07: 00.0000343, 00.0000092
08: 00.0000405, 00.0000231
09: 00.0000569, 00.0000343
10: 00.0000671, 00.0000683
11: 00.0000794, 00.0001336
12: 00.0001039, 00.0002665
13: 00.0001218, 00.0005337
14: 00.0001447, 00.0010694
15: 00.0001673, 00.0021296
16: 00.0005155, 00.0047231
17: 00.0002180, 00.0085827
18: 00.0002226, 00.0167507
19: 00.0002501, 00.0322935
20: 00.0004020, 00.0742515
21: 00.0005820, 00.1423361
22: 00.0004060, 00.2887820
23: 00.0004518, 00.5772489
24: 00.0005170, 01.1505112
25: 00.0005616, 02.3019515
26: 00.0006077, 04.6177123
27: 00.0009324, 09.1860805
28: 00.0007561, 18.5854136
29: 00.0010960, 37.6036043
</pre>

]]></content>
  </entry>
  
</feed>
